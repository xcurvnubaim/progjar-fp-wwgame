openapi: 3.0.3
info:
  title: Werewolf Game Server API
  description: |
    A complete multiplayer Werewolf (Mafia) game server with real-time gameplay, 
    automatic phase transitions, and persistent state management.
    
    ## Game Rules
    - **Minimum 3 players** required to start
    - **Roles**: 1 Werewolf, 1 Seer, remaining Villagers
    - **Night Phase** (2 minutes): Werewolves vote to kill, Seer investigates
    - **Day Phase** (5 minutes): All players discuss and vote to eliminate someone
    - **Win Conditions**:
      - Villagers win when all werewolves are eliminated
      - Werewolves win when they equal/outnumber villagers
    
    ## Game Flow
    1. Create game → Players join → Start game
    2. Night phase: Special role actions
    3. Day phase: Discussion and voting
    4. Repeat until win condition met
    
  version: 1.0.0
  contact:
    name: Werewolf Game Server
    url: https://github.com/your-repo/werewolf-server
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8888
    description: Development server

tags:
  - name: Game Management
    description: Create, join, and start games
  - name: Game Actions
    description: In-game actions like voting and special abilities
  - name: Information
    description: Get game state and player information
  - name: Chat
    description: In-game communication during day phase
  - name: Admin
    description: Administrative and debug endpoints

paths:
  /:
    get:
      tags:
        - Information
      summary: Server information
      description: Get basic server information and available endpoints
      responses:
        '200':
          description: Server information
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Werewolf Game Server"
                  version:
                    type: string
                    example: "1.0"
                  endpoints:
                    type: array
                    items:
                      type: string
                    example:
                      - "POST /games - Create new game"
                      - "POST /games/{id}/join - Join game"

  /games:
    post:
      tags:
        - Game Management
      summary: Create a new game
      description: |
        Creates a new Werewolf game instance. Returns a unique game ID that 
        players will use to join the game.
      responses:
        '200':
          description: Game created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  game_id:
                    type: string
                    description: Unique identifier for the created game
                    example: "abc12345"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /games/{game_id}/join:
    post:
      tags:
        - Game Management
      summary: Join a game
      description: |
        Add a player to an existing game. The game must be in setup phase 
        (not yet started). Player names must be unique within the game.
      parameters:
        - name: game_id
          in: path
          required: true
          description: The ID of the game to join
          schema:
            type: string
            example: "abc12345"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 20
                  description: Player's display name (must be unique in game)
                  example: "Alice"
      responses:
        '200':
          description: Successfully joined the game
          content:
            application/json:
              schema:
                type: object
                properties:
                  player_id:
                    type: string
                    description: Unique identifier for the player
                    example: "def67890"
        '400':
          description: Invalid request (missing name, name too long, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Cannot join game (already started, name taken, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /games/{game_id}/start:
    post:
      tags:
        - Game Management
      summary: Start a game
      description: |
        Begin the game by assigning roles to players and starting the first night phase.
        Requires at least 3 players. Assigns 1 Werewolf, 1 Seer, and remaining Villagers.
      parameters:
        - name: game_id
          in: path
          required: true
          schema:
            type: string
            example: "abc12345"
      responses:
        '200':
          description: Game started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "started"
        '400':
          description: Not enough players (minimum 3 required)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Game already started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /games/{game_id}/action:
    post:
      tags:
        - Game Actions
      summary: Perform a special action
      description: |
        Execute role-specific actions during the night phase:
        - **Werewolf Vote**: Vote to kill a player (werewolves only)
        - **Seer Investigate**: Investigate a player's role (seer only)
      parameters:
        - name: game_id
          in: path
          required: true
          schema:
            type: string
            example: "abc12345"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - player_id
                - action_type
              properties:
                player_id:
                  type: string
                  description: ID of the player performing the action
                  example: "def67890"
                action_type:
                  type: string
                  enum: [werewolf_vote, seer_investigate]
                  description: Type of action to perform
                  example: "werewolf_vote"
                target_id:
                  type: string
                  description: ID of the target player (required for most actions)
                  example: "ghi12345"
      responses:
        '200':
          description: Action recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "recorded"
        '400':
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Invalid action (wrong phase, wrong role, dead player, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /games/{game_id}/vote:
    post:
      tags:
        - Game Actions
      summary: Vote to eliminate a player
      description: |
        Vote to eliminate a player during the day phase. Each player can vote once,
        and can change their vote before the phase ends. The player with the most 
        votes will be eliminated.
      parameters:
        - name: game_id
          in: path
          required: true
          schema:
            type: string
            example: "abc12345"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - player_id
                - target_id
              properties:
                player_id:
                  type: string
                  description: ID of the voting player
                  example: "def67890"
                target_id:
                  type: string
                  description: ID of the player to vote for elimination
                  example: "ghi12345"
      responses:
        '200':
          description: Vote recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "voted"
        '403':
          description: Cannot vote (wrong phase, dead player, self-vote, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /games/{game_id}/chat:
    post:
      tags:
        - Chat
      summary: Send a chat message
      description: |
        Send a message to all players during the day phase. Messages are rate-limited
        to 3 per player per minute and have a maximum length of 200 characters.
      parameters:
        - name: game_id
          in: path
          required: true
          schema:
            type: string
            example: "abc12345"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - player_id
                - message
              properties:
                player_id:
                  type: string
                  description: ID of the player sending the message
                  example: "def67890"
                message:
                  type: string
                  maxLength: 200
                  description: Message content
                  example: "I think Alice is acting suspicious!"
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "sent"
        '403':
          description: Cannot chat (wrong phase, dead player, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limited (too many messages)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /games/{game_id}/state:
    get:
      tags:
        - Information
      summary: Get game state
      description: |
        Retrieve the current state of the game, including phase, players, and 
        recent chat messages. Information is filtered based on the requesting player.
      parameters:
        - name: game_id
          in: path
          required: true
          schema:
            type: string
            example: "abc12345"
        - name: player_id
          in: query
          required: false
          description: ID of the requesting player (for filtered view)
          schema:
            type: string
            example: "def67890"
      responses:
        '200':
          description: Game state retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameState'
        '404':
          description: Game not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /games/{game_id}/player/{player_id}:
    get:
      tags:
        - Information
      summary: Get player role information
      description: |
        Get role-specific information for a player, including their role,
        special abilities, and role-specific data (e.g., werewolf allies).
      parameters:
        - name: game_id
          in: path
          required: true
          schema:
            type: string
            example: "abc12345"
        - name: player_id
          in: path
          required: true
          schema:
            type: string
            example: "def67890"
      responses:
        '200':
          description: Player information retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/WerewolfInfo'
                  - $ref: '#/components/schemas/SeerInfo'
                  - $ref: '#/components/schemas/VillagerInfo'
        '404':
          description: Game or player not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/games:
    get:
      tags:
        - Admin
      summary: List all games (Debug)
      description: |
        Administrative endpoint to view all games and active timers. 
        Useful for debugging and monitoring server state.
      responses:
        '200':
          description: All games and timers retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  games:
                    type: object
                    description: All game states keyed by game ID
                  active_timers:
                    type: object
                    description: Information about active phase timers

  /admin/games/{game_id}/force-end-phase:
    post:
      tags:
        - Admin
      summary: Force end current phase (Admin)
      description: |
        Manually end the current phase immediately, triggering phase resolution
        and transition to the next phase. Administrative function for testing.
      parameters:
        - name: game_id
          in: path
          required: true
          schema:
            type: string
            example: "abc12345"
      responses:
        '200':
          description: Phase ended successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "phase ended"
        '404':
          description: Game not found or already ended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message describing what went wrong
          example: "Game not found"

    GameState:
      type: object
      properties:
        game_id:
          type: string
          example: "abc12345"
        phase:
          type: string
          enum: [setup, night, day, ended]
          example: "day"
        started:
          type: boolean
          example: true
        ended:
          type: boolean
          example: false
        winner:
          type: string
          nullable: true
          enum: [villagers, werewolves, null]
          example: null
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerInfo'
        alive_count:
          type: integer
          example: 3
        dead_count:
          type: integer
          example: 1
        phase_end:
          type: number
          nullable: true
          description: Unix timestamp when current phase ends
          example: 1640995200.0
        time_remaining:
          type: number
          nullable: true
          description: Seconds remaining in current phase
          example: 45.2
        recent_chat:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
          description: Recent chat messages (day phase only)

    PlayerInfo:
      type: object
      properties:
        id:
          type: string
          example: "def67890"
        name:
          type: string
          example: "Alice"
        alive:
          type: boolean
          example: true
        role:
          type: string
          enum: [werewolf, seer, villager]
          example: "villager"
          description: "Only visible if game ended or requesting own info"

    ChatMessage:
      type: object
      properties:
        player:
          type: string
          description: ID of the player who sent the message
          example: "def67890"
        message:
          type: string
          example: "I think Bob is the werewolf!"
        time:
          type: number
          description: Unix timestamp when message was sent
          example: 1640995200.0

    WerewolfInfo:
      type: object
      properties:
        role:
          type: string
          example: "werewolf"
        allies:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: "ghi12345"
              name:
                type: string
                example: "Bob"
          description: Other werewolves in the game
        can_kill:
          type: boolean
          example: true
          description: Whether the werewolf can vote to kill (night phase)

    SeerInfo:
      type: object
      properties:
        role:
          type: string
          example: "seer"
        can_investigate:
          type: boolean
          example: true
          description: Whether the seer can investigate (night phase)
        previous_investigations:
          type: array
          items:
            type: object
          description: History of investigations (future feature)

    VillagerInfo:
      type: object
      properties:
        role:
          type: string
          example: "villager"
        objective:
          type: string
          example: "Find and eliminate all werewolves"

  responses:
    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    BadRequest:
      description: Invalid request format or parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Forbidden:
      description: Action not allowed in current game state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  examples:
    CreateGameResponse:
      summary: Successful game creation
      value:
        game_id: "abc12345"
    
    JoinGameRequest:
      summary: Player joining a game
      value:
        name: "Alice"
    
    WerewolfVoteRequest:
      summary: Werewolf voting to kill a player
      value:
        player_id: "def67890"
        action_type: "werewolf_vote"
        target_id: "ghi12345"
    
    SeerInvestigateRequest:
      summary: Seer investigating a player
      value:
        player_id: "def67890"
        action_type: "seer_investigate"
        target_id: "ghi12345"
    
    DayVoteRequest:
      summary: Voting to eliminate a player
      value:
        player_id: "def67890"
        target_id: "ghi12345"
    
    ChatMessageRequest:
      summary: Sending a chat message
      value:
        player_id: "def67890"
        message: "I think Alice is acting suspicious!"
